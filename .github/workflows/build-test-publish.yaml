name: Build, Test, and Publish

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      publish_to_main:
        description: Publish to PyPI if tests successful
        required: true
        type: boolean
        default: false

permissions:
  contents: write

jobs:

  check-version-txt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Tag with the release version
        run: |
          git tag $(cat version.txt)

  lint-format-and-static-code-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Install pre-commit
        run: |
          pip install pre-commit
      - name: Lint, Format, and other static code quality checks
        run: |
          /bin/bash -x run.sh lint:ci

  build-wheel-and-sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Install build CLI
        run: |
          pip install build
      - name: Build python package
        run: |
          /bin/bash -x run.sh build
      - name: Upload wheel and sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheel-and-sdist
          path: ./dist/*

  execute-tests:
    needs:
      - build-wheel-and-sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Install test dependencies
        run: |
          pip install pytest pytest-cov ./dist/*.whl
      - name: Lint, Format, and other static code quality checks
        run: |
          /bin/bash -x run.sh test:ci

  deploy-to-ec2:
    needs:
      - execute-tests
      - build-wheel-and-sdist
      - lint-format-and-static-code-checks
      - check-version-txt
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Upload dist + Dockerfile to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "dist/*.whl,requirements.txt,Dockerfile.aws,version.txt"
          target: "~/address_validator"

      - name: SSH into EC2 and deploy Docker container
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            cd ~/address_validator

            echo "ðŸ›‘ Stopping old container (if any)..."
            docker stop address_validator || true
            docker rm address_validator || true

            echo "ðŸ§¹ Cleaning up old images..."
            docker image prune -f || true

            echo "ðŸ§± Rebuilding Docker image..."
            version=$(cat version.txt)
            docker build -f Dockerfile.aws -t address_validator:$version .

            echo "ðŸš€ Running new container..."
            docker run -d -p 8000:8000 --name address_validator address_validator:$version

            echo "ðŸ“¦ Capturing logs (background)..."
            docker logs address_validator > deploy.log 2>&1 &

  add-tag:
    needs:
      - deploy-to-ec2
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Push tags
        run: |
          git tag $(cat version.txt)
          git push origin --tags


  # https://docs.github.com/en/actions/learn-github-actions/contexts#example-printing-context-information-to-the-log
  dump-contexts-to-log:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
      - name: Dump job context
        run: echo '${{ toJSON(job) }}'
      - name: Dump steps context
        run: echo '${{ toJSON(steps) }}'
      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'
      - name: Dump strategy context
        run: echo '${{ toJSON(strategy) }}'
      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'
      - name: Dump secrets
        run: echo '${{ toJSON(secrets) }}'
      - name: Dump vars
        run: echo '${{ toJSON(vars) }}'
